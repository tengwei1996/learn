package com.tw.designPattern.bridge;

/**
 * 桥接模式
 * 定义：
 *  将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。
 * 优点：
 *  抽象与实现分离，扩展能力强。
 *  符合开闭原则。
 *  符合合成复用原则。
 *  其实现细节对客户透明。
 * 缺点：
 *  由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，能正确地识别出系统中两个独立变化的维度，这增加了系统的理解与设计难度。
 * 结构：
 *  抽象化（Abstraction）角色：定义抽象类，并包含一个对实现化对象的引用。
 *  扩展抽象化（Refined Abstraction）角色：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。
 *  实现化（Implementor）角色：定义实现化角色的接口，供扩展抽象化角色调用。
 *  具体实现化（Concrete Implementor）角色：给出实现化角色接口的具体实现。
 * 实现：
 *  将抽象化部分与实现化部分分开，取消二者的继承关系，改用组合关系。
 * 应用场景：
 *  当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。
 *  当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。
 *  当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。
 *
 */

/**
 * 用桥接（Bridge）模式模拟女士皮包的选购。
 * 女士皮包有很多种，可以按用途分、按皮质分、按品牌分、按颜色分、按大小分等，存在多个维度的变化，所以采用桥接模式来实现女士皮包的选购比较合适。
 * 本实例按用途分可选钱包（Wallet）和挎包（HandBag），按颜色分可选黄色（Yellow）和红色（Red）。可以按两个维度定义为颜色类和包类。
 * 颜色类（Color）是一个维度，定义为实现化角色，它有两个具体实现化角色：黄色和红色，通过 getColor() 方法可以选择颜色；
 * 包类（Bag）是另一个维度，定义为抽象化角色，它有两个扩展抽象化角色：挎包和钱包，它包含了颜色类对象，通过 getName() 方法可以选择相关颜色的挎包和钱包。
 */
public abstract class Bag {

    protected Color color;

    public void setColor(Color color) {
        this.color = color;
    }

    protected abstract String getName();
}
