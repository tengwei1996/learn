package com.tw.designPattern.templateMethod;

/**
 * 模板方法模式
 * 定义：
 *  模板方法（Template Method）模式的定义如下：定义一个操作中的算法骨架，
 *  而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。
 * 优点：
 *  它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。
 *  它在父类中提取了公共的部分代码，便于代码复用。
 *  部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。
 * 缺点：
 *  对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。
 *  父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。
 *  由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。
 * 结构：
 *  抽象类/抽象模板（Abstract Class）抽象模板类，负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。
 *   方法定义:
 *    模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。
 *    基本方法：是整个算法中的一个步骤，包含以下几种类型。
 *     抽象方法：在抽象类中声明，由具体子类实现。
 *     具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。
 *     钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。
 *  具体子类/具体实现（Concrete Class）具体实现类，实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。
 * 实现：
 *  模板方法模式需要注意抽象类与具体子类之间的协作。它用到了虚函数的多态性技术以及“不用调用我，让我来调用你”的反向控制技术。
 * 应用场景：
 *  算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。
 *  当多个子类存在公共的行为时，可以将其提取出来并集中到一个公共父类中以避免代码重复。首先，要识别现有代码中的不同之处，
 *  并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。
 *  当需要控制子类的扩展时，模板方法只在特定点调用钩子操作，这样就只允许在这些点进行扩展。
 * 注：正确使用钩子方法可以使得子类控制父类中的行为。钩子方法不是必须存在的，如templateMethod方法中的hookMethod2可以控制方templateMethod
 * 方法的整体行为
 */

/**
 * 出国留学
 *
 * 用模板方法模式实现出国留学手续设计程序。
 * 出国留学手续一般经过以下流程：索取学校资料，提出入学申请，办理因私出国护照、出境卡和公证，
 * 申请签证，体检、订机票、准备行装，抵达目标学校等，其中有些业务对各个学校是一样的，但有些业务因学校不同而不同，
 * 所以比较适合用模板方法模式来实现。
 * 我们先定义一个出国留学的抽象类 StudyAbroad，里面包含了一个模板方法 TemplateMethod()，
 * 该方法中包含了办理出国留学手续流程中的各个基本方法，其中有些方法的处理由于各国都一样，所以在抽象类中就可以实现，
 * 但有些方法的处理各国是不同的，必须在其具体子类（如美国留学类 StudyInAmerica）中实现。如果再增加一个国家，
 * 只要增加一个子类就可以了
 */
public abstract class StudyAbroad {

    /**
     * 模板方法
     */
    public void templateMethod() {
        // 获取学校资料
        lookingForSchool();
        hookMethod1();
        // 钩子方法不是必须存在的
        if (hookMethod2()) {
            // 入学申请
            applyForEnrol();
        }else {
            throw new RuntimeException("入学申请未通过，请继续努力！");
        }
        // 办理护照
        applyForPassport();
        // 申请签证
        applyForVisa();
        // 体检、订机票、准备行装
        readyGoAbroad();
        // 抵达学校
        arriving();
    }

    /**
     * 办理护照
     */
    public void applyForPassport() {
        System.out.println("三.办理因私出国护照、出境卡和公证：");
        System.out.println("  1）持录取通知书、本人户口簿或身份证向户口所在地公安机关申请办理因私出国护照和出境卡。");
        System.out.println("  2）办理出生公证书，学历、学位和成绩公证，经历证书，亲属关系公证，经济担保公证。");
    }

    /**
     * 申请签证
     */
    public void applyForVisa() {
        System.out.println("四.申请签证：");
        System.out.println("  1）准备申请国外境签证所需的各种资料，包括个人学历、成绩单、工作经历的证明；个人及家庭收入、资金和财产证明；家庭成员的关系证明等；");
        System.out.println("  2）向拟留学国家驻华使(领)馆申请入境签证。申请时需按要求填写有关表格，递交必需的证明材料，缴纳签证。有的国家(比如美国、英国、加拿大等)在申请签证时会要求申请人前往使(领)馆进行面试。");
    }

    /**
     * 体检。。。
     */
    public void readyGoAbroad() {
        System.out.println("五.体检、订机票、准备行装：");
        System.out.println("  1）进行身体检查、免疫检查和接种传染病疫苗；");
        System.out.println("  2）确定机票时间、航班和转机地点。");
    }

    /**
     * 获取学校资料
     */
    public abstract void lookingForSchool();

    /**
     * 入学申请
     */
    public abstract void applyForEnrol();

    /**
     * 抵达学校
     */
    public abstract void arriving();

    /**
     * 钩子方法1
     */
    public abstract void hookMethod1();

    /**
     * 钩子方法2
     */
    public abstract boolean hookMethod2();


}
