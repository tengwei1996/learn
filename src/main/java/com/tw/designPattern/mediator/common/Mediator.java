package com.tw.designPattern.mediator.common;

/**
 * 中介者模式
 * 定义：
 *  定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式，它是迪米特法则的典型应用。
 * 优点：
 *  类之间各司其职，符合迪米特法则。
 *  降低了对象之间的耦合性，使得对象易于独立地被复用。
 *  将对象间的一对多关联转变为一对一的关联，提高系统的灵活性，使得系统易于维护和扩展。
 * 缺点：
 *  中介者模式将原本多个对象直接的相互依赖变成了中介者和多个同事类的依赖关系。当同事类越多时，中介者就会越臃肿，变得复杂且难以维护。
 * 结构：
 *  抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。
 *  具体中介者（Concrete Mediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。
 *  抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。
 *  具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。
 * 实现：
 *  找出中介者
 * 应用场景：
 *  当对象之间存在复杂的网状结构关系而导致依赖关系混乱且难以复用时。
 *  当想创建一个运行于多个类之间的对象，又不想生成新的子类时。
 */

/**
 * 抽象中介者
 */
public abstract class Mediator {

    public abstract void register(Colleague colleague);

    /**
     * 转发
     * @param colleague
     */
    public abstract void relay(Colleague colleague);
}
